name: Build x86 Image
on:
  push:
    branches:
      - release-*
    paths-ignore:
      - 'docs/**'
      - '**.md'

env:
  KIND_VERSION: v0.11.1
  REGISTRY: etcdnecx
  RELEASE_TAG: ecx-v1.8.4

jobs:
  build:
    name: Build x86
    runs-on: ubuntu-18.04
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.5
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git
          cp dist/images/Dockerfile kube-ovn/dist/images/Dockerfile -f
          cp dist/images/Makefile kube-ovn/Makefile -f

      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Unit test
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          make ut

      - name: Build
        run: |
          cd kube-ovn
          go mod tidy
          go install github.com/securego/gosec/cmd/gosec@latest
          make release
          make tar

      - name: Upload kube-ovn image to artifact
        uses: actions/upload-artifact@v2
        with:
          name: kube-ovn
          path: kube-ovn/kube-ovn.tar

  single-e2e:
    needs: build
    name: 1-master-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  single-iptables-e2e:
    needs: build
    name: 1-master-iptables-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-iptables
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  single-vlan-e2e:
    needs: build
    name: 1-master-vlan-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-vlan
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  single-underlay-e2e-single-nic:
    needs: build
    name: 1-master-underlay-e2e-single-nic
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-underlay
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-underlay-single-nic
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '
  single-node-e2e:
    needs: build
    name: 1-node-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-single
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-single
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  ha-e2e:
    needs: build
    name: 3-master-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-ha
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
  ipv6-e2e:
    needs: build
    name: ipv6-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-ipv6
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-ipv6
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  ipv6-vlan-e2e:
    needs: build
    name: ipv6-vlan-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-ipv6
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-vlan-ipv6
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  ipv6-underlay-e2e-single-nic:
    needs: build
    name: ipv6-underlay-e2e-single-nic
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-underlay-ipv6
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-underlay-single-nic
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '
  dual-stack-e2e:
    needs: build
    name: dual-stack-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-dual
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-dual
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  dual-stack-underlay-e2e-single-nic:
    needs: build
    name: dual-stack-underlay-e2e-single-nic
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-dual
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-underlay-dual
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e-underlay-single-nic
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '
  dual-stack-underlay-logical-gw-e2e:
    needs: build
    name: dual-stack-underlay-logical-gateway-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-dual
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install-underlay-logical-gateway-dual
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '
  no-lb-e2e:
    needs: build
    name: disable-loadbalancer-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN without LoadBalancer
        env:
          ENABLE_LB: "false"
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  no-lb-iptables-e2e:
    needs: build
    name: disable-loadbalancer-iptables-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-iptables
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN without LoadBalancer
        env:
          ENABLE_LB: "false"
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  no-np-e2e:
    needs: build
    name: disable-network-policy-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN without network policy support
        env:
          ENABLE_NP: "false"
        run: |
          docker load --input kube-ovn.tar
          sudo make kind-install
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod 666 /home/runner/.kube/config
          make e2e
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  ovnic-e2e:
    needs: build
    name: 1-master-ovnic-e2e
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    steps:
      - name: Check out kube-ovn
        run: |
          git clone -b $RELEASE_TAG --depth=1 https://github.com/EdgeCloudX/kube-ovn.git

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Init Kind
        run: |
          pip install j2cli --user
          pip install "j2cli[yaml]" --user
          sudo PATH=~/.local/bin:$PATH make kind-init-cluster
      - name: Download image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo PATH=~/.local/bin:$PATH make kind-install-cluster
          sudo PATH=~/.local/bin:$PATH make kind-install-ic
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
        id: go

      - name: Run E2E
        run: |
          cd kube-ovn
          go install github.com/onsi/ginkgo/ginkgo@latest
          sudo kubectl cluster-info
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-ovn-ic
      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh
  push:
    needs:
      - single-e2e
      - single-iptables-e2e
      - single-vlan-e2e
      - single-underlay-e2e-single-nic
      - single-node-e2e
      - ha-e2e
      - ipv6-e2e
      - ipv6-vlan-e2e
      - ipv6-underlay-e2e-single-nic
      - dual-stack-e2e
      - dual-stack-underlay-logical-gw-e2e
      - dual-stack-underlay-e2e-single-nic
      - no-lb-e2e
      - no-lb-iptables-e2e
      - no-np-e2e
      - ovnic-e2e
    name: push
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download kube-ovn image
        uses: actions/download-artifact@v2
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - name: Push
        if: ${{ contains(github.ref, 'release') }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          COMMIT: ${{ github.sha }}
        run: |
          cat VERSION
          TAG=$(cat VERSION)
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker images
          docker push $(REGISTRY)/kube-ovn:$TAG